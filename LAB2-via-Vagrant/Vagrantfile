nodes = {
  
  :iscsi => {
    :box_name => "centos/7",
    :ip_addr => '192.168.1.10',
    :ip_addr_secondary => '192.168.2.10',
	  :disks => {
	    :satan1 => {
        :dfile => './sata44.vdi',
		    :size => 1000,
		    :port => 1
	  },
    }
  },
  
  :node1 => {
    :box_name => "centos/7",
    :ip_addr => '192.168.1.11',
    :ip_addr_secondary => '192.168.2.11',
    :disks => {
      :satan1 => {
	      :dfile => './sata1.vdi',
			  :size => 32,
			  :port => 1
	   },
    }
  },
  
  :node2 => {
    :box_name => "centos/7",
    :ip_addr => '192.168.1.12',
    :ip_addr_secondary => '192.168.2.12',
	  :disks => {
	    :satan1 => {
	      :dfile => './sata2.vdi',
			  :size => 32,
			  :port => 1
	   },
    }
  },

  :node3 => {
    :box_name => "centos/7",
    :ip_addr => '192.168.1.13',
    :ip_addr_secondary => '192.168.2.13',
	  :disks => {
	    :satan1 => {
	      :dfile => './sata3.vdi',
			  :size => 32,
			  :port => 1
	   },
    }
  },

  :ansible => {
    :box_name => "centos/7",
    :ip_addr => '192.168.1.100',
    :ip_addr_secondary => '192.168.2.100',
          :disks => {
            :satan1 => {
              :dfile => './sata55.vdi',
                          :size => 32,
                          :port => 1
           },
    }
  },  	
	
	
}

Vagrant.configure(2) do |config|
  nodes.each do |boxname, boxconfig|
    
    ### Configure shared folders between host and guest VM
    config.vm.synced_folder ".", "/vagrant", type: "rsync"
    
    config.vm.define boxname do |box|

      box.vm.box = boxconfig[:box_name]
      box.vm.host_name = boxname.to_s
      box.vm.network "private_network", {ip: boxconfig[:ip_addr], adapter: 2}
      box.vm.network "private_network", {ip: boxconfig[:ip_addr_secondary], adapter: 3, virtualbox__intnet: "secondary-net"}
         
	  box.vm.provider :virtualbox do |vb|
        vb.customize ["modifyvm", :id, "--memory", "256"]
        vb.customize ["modifyvm", :id, "--cableconnected1", "on"]
        vb.cpus = 1
	    needsController = false
          boxconfig[:disks].each do |dname, dconf|
	        unless File.exist?(dconf[:dfile])
	          vb.customize ['createhd', '--filename', dconf[:dfile], '--variant', 'Fixed', '--size', dconf[:size]]
              needsController =  true
            end
          end
             
          if needsController == true
            vb.customize ["storagectl", :id, "--name", "SATA", "--add", "sata" ]
            boxconfig[:disks].each do |dname, dconf|
              vb.customize ['storageattach', :id,  '--storagectl', 'SATA', '--port', dconf[:port], '--device', 0, '--type', 'hdd', '--medium', dconf[:dfile]]
            end
          end
     end

     case boxname.to_s
     when "node1"
       box.vm.provision "shell", run: "always", inline: <<-SHELL
       sudo su && 
       useradd ansible -d /home/ansible && echo password | passwd ansible --stdin &&  #Create user "ansible" with password "password"
       usermod -aG wheel ansible &&
       sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/g' /etc/ssh/sshd_config && #Turn on SSH password authentication
       sed -i 's/#PubkeyAuthentication yes/PubkeyAuthentication yes/g' /etc/ssh/sshd_config &&
       systemctl restart sshd
                       
         SHELL
     end

     case boxname.to_s
     when "node2"
       box.vm.provision "shell", run: "always", inline: <<-SHELL
       sudo su && 
       useradd ansible -d /home/ansible && echo password | passwd ansible --stdin &&  
       usermod -aG wheel ansible &&
       sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/g' /etc/ssh/sshd_config && 
       sed -i 's/#PubkeyAuthentication yes/PubkeyAuthentication yes/g' /etc/ssh/sshd_config &&
       systemctl restart sshd
                
         SHELL
     end

     case boxname.to_s
     when "node3"
       box.vm.provision "shell", run: "always", inline: <<-SHELL
       sudo su && 
       useradd ansible -d /home/ansible && echo password | passwd ansible --stdin &&  
       usermod -aG wheel ansible &&
       sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/g' /etc/ssh/sshd_config && 
       sed -i 's/#PubkeyAuthentication yes/PubkeyAuthentication yes/g' /etc/ssh/sshd_config &&
       systemctl restart sshd
                
         SHELL
     end

     case boxname.to_s
     when "iscsi"
       box.vm.provision "shell", run: "always", inline: <<-SHELL
       sudo su && 
       useradd ansible -d /home/ansible && echo password | passwd ansible --stdin &&  
       usermod -aG wheel ansible &&
       sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/g' /etc/ssh/sshd_config && 
       sed -i 's/#PubkeyAuthentication yes/PubkeyAuthentication yes/g' /etc/ssh/sshd_config &&
       systemctl restart sshd
                
         SHELL
     end

     case boxname.to_s
     when "ansible"
       box.vm.provision "shell", run: "always", inline: <<-SHELL
       sudo su &&
       useradd ansible -d /home/ansible && echo password | passwd ansible --stdin &&
       usermod -aG wheel ansible &&
       yum install epel-release -y &&
       yum install ansible -y &&
       yum install sshpass -y &&
       sudo -u ansible ssh-keygen -t rsa -N "" -f /home/ansible/.ssh/id_rsa && #Generate SSH key pair for distribute it to all managed hosts
       sshpass -p 'password' ssh -o StrictHostKeyChecking=no ansible@192.168.1.10 'mkdir -p /home/ansible/.ssh && cat >> /home/ansible/.ssh/authorized_keys' < /home/ansible/.ssh/id_rsa.pub && #Copy public SSH key to remote server
       sshpass -p 'password' ssh -o StrictHostKeyChecking=no ansible@192.168.1.10 'chmod 700 /home/ansible/.ssh && chmod 600 /home/ansible/.ssh/authorized_keys' && #Set necessary permissions for key folder and key file         
       sshpass -p 'password' ssh -o StrictHostKeyChecking=no ansible@192.168.1.11 'mkdir -p /home/ansible/.ssh && cat >> /home/ansible/.ssh/authorized_keys' < /home/ansible/.ssh/id_rsa.pub && 
       sshpass -p 'password' ssh -o StrictHostKeyChecking=no ansible@192.168.1.11 'chmod 700 /home/ansible/.ssh && chmod 600 /home/ansible/.ssh/authorized_keys' &&
       sshpass -p 'password' ssh -o StrictHostKeyChecking=no ansible@192.168.1.12 'mkdir -p /home/ansible/.ssh && cat >> /home/ansible/.ssh/authorized_keys' < /home/ansible/.ssh/id_rsa.pub && 
       sshpass -p 'password' ssh -o StrictHostKeyChecking=no ansible@192.168.1.12 'chmod 700 /home/ansible/.ssh && chmod 600 /home/ansible/.ssh/authorized_keys' &&
       sshpass -p 'password' ssh -o StrictHostKeyChecking=no ansible@192.168.1.13 'mkdir -p /home/ansible/.ssh && cat >> /home/ansible/.ssh/authorized_keys' < /home/ansible/.ssh/id_rsa.pub && 
       sshpass -p 'password' ssh -o StrictHostKeyChecking=no ansible@192.168.1.13 'chmod 700 /home/ansible/.ssh && chmod 600 /home/ansible/.ssh/authorized_keys' &&
       cp -r /vagrant/ansible /home/ansible && 
       chown -R ansible:ansible /home/ansible/ansible &&
       cd /home/ansible/ansible &&
       sudo -u ansible ansible all -m ping
      

         SHELL

     end
         
       #box.vm.provision "ansible" do |ansible|
       #  ansible.playbook = "./ansible/site.yml"
       #  ansible.become = true
       #end
       

      
          
  
    end
  end
end
